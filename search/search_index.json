{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230 OI Notes\uff01","title":"Home"},{"location":"basic/bigint/","tags":["\u57fa\u7840\u7b97\u6cd5","\u9ad8\u7cbe\u5ea6"],"text":"\u4f17\u6240\u5468\u77e5\uff0cC++ \u7684 int \u7c7b\u578b\u53ea\u80fd\u8868\u793a \\([-2^{31}, 2^{31}-1]\\) \u7684\u6574\u6570\uff0c\u800c long long \u7c7b\u578b\u53ea\u80fd\u8868\u793a \\([-2^{63}, 2^{63}-1]\\) \u7684\u6574\u6570\u3002\u5982\u679c\u8981\u8868\u793a\u66f4\u5927\u7684\u6574\u6570\uff0c\u5c31\u9700\u8981\u7528\u5230\u9ad8\u7cbe\u5ea6\u6574\u6570\u3002 \u6211\u4eec\u53ef\u4ee5\u4ee5 int \u6570\u7ec4\u7684\u5f62\u5f0f\u6765\u8868\u793a\u9ad8\u7cbe\u5ea6\u6574\u6570\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u4e00\u4f4d\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a 5 \u7684\u6570\u7ec4\u6765\u8868\u793a\u4e00\u4e2a 5 \u4f4d\u7684\u6574\u6570\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u8fd9\u4e2a\u6574\u6570\u7684\u4e00\u4f4d\uff0c\u4f8b\u5982 a[0] \u8868\u793a\u8fd9\u4e2a\u6574\u6570\u7684\u4e2a\u4f4d\uff0c a[1] \u8868\u793a\u8fd9\u4e2a\u6574\u6570\u7684\u5341\u4f4d\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u90e8\u5206\u8bed\u8a00\u5982 Python\u3001Java \u81ea\u5e26\u9ad8\u7cbe\u5ea6\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002 \u5b9a\u4e49\uff1a C++ struct BigInteger { int a [ 1000 ]; BigInteger () { memset ( a , 0 , sizeof ( a )); } BigInteger operator + ( const int x ) { BigInteger c ; c . a [ 0 ] = a [ 0 ] + x ; for ( int i = 1 ; i < 1000 ; i ++ ) { c . a [ i ] = a [ i ]; if ( c . a [ i - 1 ] >= 10 ) { c . a [ i - 1 ] -= 10 ; c . a [ i ] ++ ; } } return c ; } BigInteger operator + ( const BigInteger b ) { BigInteger c ; for ( int i = 0 ; i < 1000 ; i ++ ) { c . a [ i ] = a [ i ] + b . a [ i ]; if ( c . a [ i - 1 ] >= 10 ) { c . a [ i - 1 ] -= 10 ; c . a [ i ] ++ ; } } return c ; } BigInteger operator - ( const int x ) { BigInteger c ; c . a [ 0 ] = a [ 0 ] - x ; for ( int i = 1 ; i < 1000 ; i ++ ) { c . a [ i ] = a [ i ]; if ( c . a [ i - 1 ] < 0 ) { c . a [ i - 1 ] += 10 ; c . a [ i ] -- ; } } return c ; } BigInteger operator - ( const BigInteger b ) { BigInteger c ; for ( int i = 0 ; i < 1000 ; i ++ ) { c . a [ i ] = a [ i ] - b . a [ i ]; if ( c . a [ i - 1 ] < 0 ) { c . a [ i - 1 ] += 10 ; c . a [ i ] -- ; } } return c ; } BigInteger operator * ( const int x ) { BigInteger c ; for ( int i = 0 ; i < 1000 ; i ++ ) { c . a [ i ] = a [ i ] * x ; if ( c . a [ i - 1 ] >= 10 ) { c . a [ i - 1 ] -= 10 ; c . a [ i ] ++ ; } } return c ; } BigInteger operator * ( const BigInteger b ) { BigInteger c ; for ( int i = 0 ; i < 1000 ; i ++ ) { for ( int j = 0 ; j < 1000 ; j ++ ) { c . a [ i + j ] += a [ i ] * b . a [ j ]; if ( c . a [ i + j - 1 ] >= 10 ) { c . a [ i + j - 1 ] -= 10 ; c . a [ i + j ] ++ ; } } } return c ; } BigInteger operator / ( const int x ) { BigInteger c ; for ( int i = 999 ; i >= 0 ; i -- ) { c . a [ i ] = a [ i ] / x ; a [ i - 1 ] += ( a [ i ] % x ) * 10 ; } return c ; } BigInteger operator / ( const BigInteger b ) { BigInteger c ; for ( int i = 999 ; i >= 0 ; i -- ) { c . a [ i ] = a [ i ] / b . a [ i ]; a [ i - 1 ] += ( a [ i ] % b . a [ i ]) * 10 ; } return c ; } BigInteger operator % ( const int x ) { BigInteger c ; for ( int i = 999 ; i >= 0 ; i -- ) { c . a [ i ] = a [ i ] % x ; a [ i - 1 ] += ( a [ i ] % x ) * 10 ; } return c ; } BigInteger operator % ( const BigInteger b ) { BigInteger c ; for ( int i = 999 ; i >= 0 ; i -- ) { c . a [ i ] = a [ i ] % b . a [ i ]; a [ i - 1 ] += ( a [ i ] % b . a [ i ]) * 10 ; } return c ; } bool operator < ( const BigInteger b ) { for ( int i = 999 ; i >= 0 ; i -- ) { if ( a [ i ] != b . a [ i ]) return a [ i ] < b . a [ i ]; } return false ; } bool operator > ( const BigInteger b ) { for ( int i = 999 ; i >= 0 ; i -- ) { if ( a [ i ] != b . a [ i ]) return a [ i ] > b . a [ i ]; } return false ; } bool operator <= ( const BigInteger b ) { for ( int i = 999 ; i >= 0 ; i -- ) { if ( a [ i ] != b . a [ i ]) return a [ i ] <= b . a [ i ]; } return true ; } bool operator >= ( const BigInteger b ) { for ( int i = 999 ; i >= 0 ; i -- ) { if ( a [ i ] != b . a [ i ]) return a [ i ] >= b . a [ i ]; } return true ; } bool operator == ( const BigInteger b ) { for ( int i = 999 ; i >= 0 ; i -- ) { if ( a [ i ] != b . a [ i ]) return false ; } return true ; } bool operator != ( const BigInteger b ) { for ( int i = 999 ; i >= 0 ; i -- ) { if ( a [ i ] != b . a [ i ]) return true ; } return false ; } }; \u5728\u4f7f\u7528FFT\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5c06\u590d\u6742\u5ea6\u4ece \\(O(n^2)\\) \u4e0b\u964d\u5230 \\(O(n \\log n)\\) \u3002","title":"\u9ad8\u7cbe\u5ea6"},{"location":"basic/prefix-sum/","tags":["\u57fa\u7840\u7b97\u6cd5","\u524d\u7f00\u548c"],"text":"\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4 \\(\\{a_n\\}\\) \u3002 \u8003\u8651\u4e00\u4e2a\u95ee\u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4 \\([l, r]\\) \uff0c\u6c42 \\(\\sum_{i=l}^r a_i\\) \u3002 \u6211\u4eec\u53ef\u4ee5\u5148\u4f7f\u7528\u66b4\u529b\u7684\u65b9\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u904d\u5386 \\([l, r]\\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(nq)\\) \uff1a C++ int query ( int l , int r ) { int sum = 0 ; for ( int i = l ; i <= r ; i ++ ) sum += a [ i ]; return sum ; } \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c \\(\\sum_{i=l}^r a_i = \\sum_{i=1}^{r}a_i-\\sum_{i=1}^{l-1}a_i\\) \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728 \\(O(n)\\) \u65f6\u95f4\u5185\u9884\u8ba1\u7b97 \\(\\{s_n\\}=\\sum_{i=1}^{n}a_i\\) \uff1a C++ for ( int i = 1 ; i <= n ; i ++ ) s [ i ] = s [ i -1 ] + a [ i ]; \u8fd9\u6837\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u6211\u4eec\u53ea\u9700\u8981 \\(O(1)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a C++ printf ( \"%d \\n \" , s [ r ] - s [ l -1 ]); \u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u79cd\u9884\u5904\u7406\u7684\u65b9\u6cd5\uff0c\u662f\u4e00\u4e2a\u96c6\u5408\u7684\u8865\u96c6\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u63a8\u5e7f\u5230\u4e8c\u7ef4\u4e0a\u3002 \u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 \\(\\{a_{ij}\\}\\) \u3002 \u8003\u8651\u4e00\u4e2a\u95ee\u9898\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u77e9\u5f62\u533a\u57df \\([l, r]\\times[d, u]\\) \uff0c\u6c42 \\(\\sum_{i=l}^r\\sum_{j=d}^u a_{ij}\\) \u3002 \u90a3\u4e48\u8bbe \\(s_{l,r,d,u}\\) \u8868\u793a \\(\\sum_{i=l}^r\\sum_{j=d}^u a_{ij}\\) \u3002 \u6f14\u793a\u56fe\u5982\u4e0b\uff1a \u6545 \\(s_{l,r,d,u} = s_{1,1,r,u} - s_{1,1,l-1,u} - s_{1,1,r,u-1} + s_{1,1,l-1,d-1}\\) \u3002 \u6ce8\u610f\u5230 \\(s_{l,r,d,u}\\) \u7684\u503c\u53ea\u4e0e \\(s_{1,1,*,*}\\) \u7684\u503c\u76f8\u5173\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53ea\u8ba1\u7b97 \\({s_{1,1,d,u}}\\) \u7684\u503c\u5373\u53ef\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f18\u5316\u5230 \\(O(n^2)\\) \u3002 \u5bb9\u6613\u63a8\u5f97 \\(s_{1,1,d,u} = s_{1,1,d-1,u} + s_{1,1,d,u-1} - s_{1,1,d-1,u-1} + a_{d,u}\\) \u3002 \u4e8e\u662f\u5c31\u53ef\u4ee5\u7701\u53bb\u524d\u4e24\u7ef4\uff0c\u5f97\u5230 \\(s_{d,u} = s_{d-1,u} + s_{d,u-1} - s_{d-1,u-1} + a_{d,u}\\) \u3002 \u6211\u4eec\u53ef\u4ee5\u5728 \\(O(n^2)\\) \u7684\u65f6\u95f4\u5185\u9884\u5904\u7406\u51fa \\(\\{s_{d,u}\\}\\) \uff1a C++ for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) s [ i ][ j ] = s [ i -1 ][ j ] + s [ i ][ j -1 ] - s [ i -1 ][ j -1 ] + a [ i ][ j ]; \u95ee\u8be2\u7684\u65f6\u5019\u4fbf\u662f\uff1a C++ int query ( int l , int r , int d , int u ) { return s [ r ][ u ] - s [ l -1 ][ u ] - s [ r ][ d -1 ] + s [ l -1 ][ d -1 ]; } printf ( \"%d \\n \" , query ( l , r , d , u ));","title":"\u524d\u7f00\u548c"},{"location":"basic/sort/","tags":["\u57fa\u7840\u7b97\u6cd5","\u6392\u5e8f"],"text":"\u5feb\u901f\u6392\u5e8f \u00b6 \u5feb\u901f\u6392\u5e8f\u662f\u4e00\u79cd\u5206\u6cbb\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u5176\u57fa\u672c\u601d\u60f3\u662f\uff1a\u901a\u8fc7\u4e00\u8d9f\u6392\u5e8f\u5c06\u5f85\u6392\u8bb0\u5f55\u5206\u5272\u6210\u72ec\u7acb\u7684\u4e24\u90e8\u5206\uff0c\u5176\u4e2d\u4e00\u90e8\u5206\u8bb0\u5f55\u7684\u5173\u952e\u5b57\u5747\u6bd4\u53e6\u4e00\u90e8\u5206\u7684\u5173\u952e\u5b57\u5c0f\uff0c\u5219\u53ef\u5206\u522b\u5bf9\u8fd9\u4e24\u90e8\u5206\u8bb0\u5f55\u7ee7\u7eed\u8fdb\u884c\u6392\u5e8f\uff0c\u4ee5\u8fbe\u5230\u6574\u4e2a\u5e8f\u5217\u6709\u5e8f\u3002 \u7b97\u6cd5\u63cf\u8ff0 \u00b6 \u4ece\u6570\u5217\u4e2d\u6311\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u79f0\u4e3a \u201c\u57fa\u51c6\u201d\uff08pivot\uff09\uff1b \u91cd\u65b0\u6392\u5e8f\u6570\u5217\uff0c\u6240\u6709\u5143\u7d20\u6bd4\u57fa\u51c6\u503c\u5c0f\u7684\u6446\u653e\u5728\u57fa\u51c6\u524d\u9762\uff0c\u6240\u6709\u5143\u7d20\u6bd4\u57fa\u51c6\u503c\u5927\u7684\u6446\u5728\u57fa\u51c6\u7684\u540e\u9762\uff08\u76f8\u540c\u7684\u6570\u53ef\u4ee5\u5230\u4efb\u4e00\u8fb9\uff09\u3002\u5728\u8fd9\u4e2a\u5206\u533a\u9000\u51fa\u4e4b\u540e\uff0c\u8be5\u57fa\u51c6\u5c31\u5904\u4e8e\u6570\u5217\u7684\u4e2d\u95f4\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u79f0\u4e3a\u5206\u533a\uff08partition\uff09\u64cd\u4f5c\uff1b \u9012\u5f52\u5730\uff08recursive\uff09\u628a\u5c0f\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u6570\u5217\u548c\u5927\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u6570\u5217\u6392\u5e8f\u3002 \u4ee3\u7801 \u00b6 C++ void quick_sort ( int * arr , int l , int r ) { if ( l >= r ) swap ( l , r ); int i = l -1 , j = r + 1 , x = arr [ l + r >> 1 ]; while ( i < j ) { do i ++ ; while ( arr [ i ] < x ); do j -- ; while ( arr [ j ] > x ); if ( i < j ) swap ( arr [ i ], arr [ j ]); } quick_sort ( arr , l , j ); quick_sort ( arr , j + 1 , r ); } \u5f52\u5e76\u6392\u5e8f \u00b6 \u5f52\u5e76\u6392\u5e8f\u662f\u5efa\u7acb\u5728\u5f52\u5e76\u64cd\u4f5c\u4e0a\u7684\u4e00\u79cd\u6709\u6548\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u662f\u91c7\u7528\u5206\u6cbb\u6cd5\uff08Divide and Conquer\uff09\u7684\u4e00\u4e2a\u975e\u5e38\u5178\u578b\u7684\u5e94\u7528\u3002\u5c06\u5df2\u6709\u5e8f\u7684\u5b50\u5e8f\u5217\u5408\u5e76\uff0c\u5f97\u5230\u5b8c\u5168\u6709\u5e8f\u7684\u5e8f\u5217\uff1b\u5373\u5148\u4f7f\u6bcf\u4e2a\u5b50\u5e8f\u5217\u6709\u5e8f\uff0c\u518d\u4f7f\u5b50\u5e8f\u5217\u6bb5\u95f4\u6709\u5e8f\u3002\u82e5\u5c06\u4e24\u4e2a\u6709\u5e8f\u8868\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u8868\uff0c\u79f0\u4e3a2-\u8def\u5f52\u5e76\u3002 \u7b97\u6cd5\u63cf\u8ff0 \u00b6 \u628a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u8f93\u5165\u5e8f\u5217\u5206\u6210\u4e24\u4e2a\u957f\u5ea6\u4e3a \\(\\dfrac{n}{2}\\) \u7684\u5b50\u5e8f\u5217\uff1b \u5bf9\u8fd9\u4e24\u4e2a\u5b50\u5e8f\u5217\u5206\u522b\u91c7\u7528\u5f52\u5e76\u6392\u5e8f\uff1b \u5c06\u4e24\u4e2a\u6392\u5e8f\u597d\u7684\u5b50\u5e8f\u5217\u5408\u5e76\u6210\u4e00\u4e2a\u6700\u7ec8\u7684\u6392\u5e8f\u5e8f\u5217\u3002 \u4ee3\u7801 \u00b6 C++ void merge_sort ( int * arr , int l , int r ) { if ( l >= r ) return ; int mid = l + r >> 1 ; merge_sort ( arr , l , mid ); merge_sort ( arr , mid + 1 , r ); int k = 0 , i = l , j = mid + 1 ; while ( i <= mid && j <= r ) { if ( arr [ i ] <= arr [ j ]) tmp [ k ++ ] = arr [ i ++ ]; else tmp [ k ++ ] = arr [ j ++ ]; } while ( i <= mid ) tmp [ k ++ ] = arr [ i ++ ]; while ( j <= r ) tmp [ k ++ ] = arr [ j ++ ]; for ( int i = l , j = 0 ; i <= r ; i ++ , j ++ ) arr [ i ] = tmp [ j ]; } \u5806\u6392\u5e8f \u00b6 \u5806\u6392\u5e8f\u662f\u6307\u5229\u7528\u5806\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u6240\u8bbe\u8ba1\u7684\u4e00\u79cd\u6392\u5e8f\u7b97\u6cd5\u3002\u5806\u662f\u4e00\u4e2a\u8fd1\u4f3c\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u5e76\u540c\u65f6\u6ee1\u8db3\u5806\u7684\u6027\u8d28\uff1a\u5373\u5b50\u8282\u70b9\u7684\u952e\u503c\u6216\u7d22\u5f15\u603b\u662f\u5c0f\u4e8e\uff08\u6216\u8005\u5927\u4e8e\uff09\u5b83\u7684\u7236\u8282\u70b9\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 std::priority_queue \u6765\u5b9e\u73b0\u5806\u6392\u5e8f\u3002 \u4ee3\u7801 \u00b6 C++ void heap_sort ( int * arr , int l , int r ) { std :: priority_queue < int , std :: vector < int > , std :: greater < int >> q ; for ( int i = l ; i <= r ; i ++ ) q . push ( arr [ i ]); for ( int i = l ; i <= r ; i ++ ) arr [ i ] = q . top (), q . pop (); } std::sort \u00b6 std::sort \u662f C++ STL \u4e2d\u7684\u6392\u5e8f\u51fd\u6570\uff0c\u5176\u5e95\u5c42\u5b9e\u73b0\u662f\uff1a \u5f53\u5143\u7d20\u4e2a\u6570\u5f88\u5c0f\u65f6\uff0c\u4f7f\u7528\u63d2\u5165\u6392\u5e8f\uff1b \u5f53\u5143\u7d20\u4e2a\u6570\u5f88\u5927\u65f6\uff0c\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\uff1b \u5f53\u9012\u5f52\u5c42\u6570\u8d85\u8fc7\u67d0\u4e2a\u503c\u65f6\uff0c\u4f7f\u7528\u5806\u6392\u5e8f\u3002 std::sort \u6e90\u4ee3\u7801\uff1a C++ template < typename _RandomAccessIterator , typename _Compare > void sort ( _RandomAccessIterator __first , _RandomAccessIterator __last , _Compare __comp ) { if ( __last - __first < 16 ) { __insertion_sort ( __first , __last , __comp ); return ; } _RandomAccessIterator __cut = __unguarded_partition ( __first , __last , __comp ); __unguarded_linear_insert ( __cut , __value_type ( __first ), __comp ); __final_insertion_sort ( __first , __cut , __comp ); }","title":"\u6392\u5e8f"},{"location":"basic/sort/#\u5feb\u901f\u6392\u5e8f","text":"\u5feb\u901f\u6392\u5e8f\u662f\u4e00\u79cd\u5206\u6cbb\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u5176\u57fa\u672c\u601d\u60f3\u662f\uff1a\u901a\u8fc7\u4e00\u8d9f\u6392\u5e8f\u5c06\u5f85\u6392\u8bb0\u5f55\u5206\u5272\u6210\u72ec\u7acb\u7684\u4e24\u90e8\u5206\uff0c\u5176\u4e2d\u4e00\u90e8\u5206\u8bb0\u5f55\u7684\u5173\u952e\u5b57\u5747\u6bd4\u53e6\u4e00\u90e8\u5206\u7684\u5173\u952e\u5b57\u5c0f\uff0c\u5219\u53ef\u5206\u522b\u5bf9\u8fd9\u4e24\u90e8\u5206\u8bb0\u5f55\u7ee7\u7eed\u8fdb\u884c\u6392\u5e8f\uff0c\u4ee5\u8fbe\u5230\u6574\u4e2a\u5e8f\u5217\u6709\u5e8f\u3002","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"basic/sort/#\u7b97\u6cd5\u63cf\u8ff0","text":"\u4ece\u6570\u5217\u4e2d\u6311\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u79f0\u4e3a \u201c\u57fa\u51c6\u201d\uff08pivot\uff09\uff1b \u91cd\u65b0\u6392\u5e8f\u6570\u5217\uff0c\u6240\u6709\u5143\u7d20\u6bd4\u57fa\u51c6\u503c\u5c0f\u7684\u6446\u653e\u5728\u57fa\u51c6\u524d\u9762\uff0c\u6240\u6709\u5143\u7d20\u6bd4\u57fa\u51c6\u503c\u5927\u7684\u6446\u5728\u57fa\u51c6\u7684\u540e\u9762\uff08\u76f8\u540c\u7684\u6570\u53ef\u4ee5\u5230\u4efb\u4e00\u8fb9\uff09\u3002\u5728\u8fd9\u4e2a\u5206\u533a\u9000\u51fa\u4e4b\u540e\uff0c\u8be5\u57fa\u51c6\u5c31\u5904\u4e8e\u6570\u5217\u7684\u4e2d\u95f4\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u79f0\u4e3a\u5206\u533a\uff08partition\uff09\u64cd\u4f5c\uff1b \u9012\u5f52\u5730\uff08recursive\uff09\u628a\u5c0f\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u6570\u5217\u548c\u5927\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u6570\u5217\u6392\u5e8f\u3002","title":"\u7b97\u6cd5\u63cf\u8ff0"},{"location":"basic/sort/#\u4ee3\u7801","text":"C++ void quick_sort ( int * arr , int l , int r ) { if ( l >= r ) swap ( l , r ); int i = l -1 , j = r + 1 , x = arr [ l + r >> 1 ]; while ( i < j ) { do i ++ ; while ( arr [ i ] < x ); do j -- ; while ( arr [ j ] > x ); if ( i < j ) swap ( arr [ i ], arr [ j ]); } quick_sort ( arr , l , j ); quick_sort ( arr , j + 1 , r ); }","title":"\u4ee3\u7801"},{"location":"basic/sort/#\u5f52\u5e76\u6392\u5e8f","text":"\u5f52\u5e76\u6392\u5e8f\u662f\u5efa\u7acb\u5728\u5f52\u5e76\u64cd\u4f5c\u4e0a\u7684\u4e00\u79cd\u6709\u6548\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u662f\u91c7\u7528\u5206\u6cbb\u6cd5\uff08Divide and Conquer\uff09\u7684\u4e00\u4e2a\u975e\u5e38\u5178\u578b\u7684\u5e94\u7528\u3002\u5c06\u5df2\u6709\u5e8f\u7684\u5b50\u5e8f\u5217\u5408\u5e76\uff0c\u5f97\u5230\u5b8c\u5168\u6709\u5e8f\u7684\u5e8f\u5217\uff1b\u5373\u5148\u4f7f\u6bcf\u4e2a\u5b50\u5e8f\u5217\u6709\u5e8f\uff0c\u518d\u4f7f\u5b50\u5e8f\u5217\u6bb5\u95f4\u6709\u5e8f\u3002\u82e5\u5c06\u4e24\u4e2a\u6709\u5e8f\u8868\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u8868\uff0c\u79f0\u4e3a2-\u8def\u5f52\u5e76\u3002","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"basic/sort/#\u7b97\u6cd5\u63cf\u8ff0_1","text":"\u628a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u8f93\u5165\u5e8f\u5217\u5206\u6210\u4e24\u4e2a\u957f\u5ea6\u4e3a \\(\\dfrac{n}{2}\\) \u7684\u5b50\u5e8f\u5217\uff1b \u5bf9\u8fd9\u4e24\u4e2a\u5b50\u5e8f\u5217\u5206\u522b\u91c7\u7528\u5f52\u5e76\u6392\u5e8f\uff1b \u5c06\u4e24\u4e2a\u6392\u5e8f\u597d\u7684\u5b50\u5e8f\u5217\u5408\u5e76\u6210\u4e00\u4e2a\u6700\u7ec8\u7684\u6392\u5e8f\u5e8f\u5217\u3002","title":"\u7b97\u6cd5\u63cf\u8ff0"},{"location":"basic/sort/#\u4ee3\u7801_1","text":"C++ void merge_sort ( int * arr , int l , int r ) { if ( l >= r ) return ; int mid = l + r >> 1 ; merge_sort ( arr , l , mid ); merge_sort ( arr , mid + 1 , r ); int k = 0 , i = l , j = mid + 1 ; while ( i <= mid && j <= r ) { if ( arr [ i ] <= arr [ j ]) tmp [ k ++ ] = arr [ i ++ ]; else tmp [ k ++ ] = arr [ j ++ ]; } while ( i <= mid ) tmp [ k ++ ] = arr [ i ++ ]; while ( j <= r ) tmp [ k ++ ] = arr [ j ++ ]; for ( int i = l , j = 0 ; i <= r ; i ++ , j ++ ) arr [ i ] = tmp [ j ]; }","title":"\u4ee3\u7801"},{"location":"basic/sort/#\u5806\u6392\u5e8f","text":"\u5806\u6392\u5e8f\u662f\u6307\u5229\u7528\u5806\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u6240\u8bbe\u8ba1\u7684\u4e00\u79cd\u6392\u5e8f\u7b97\u6cd5\u3002\u5806\u662f\u4e00\u4e2a\u8fd1\u4f3c\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u5e76\u540c\u65f6\u6ee1\u8db3\u5806\u7684\u6027\u8d28\uff1a\u5373\u5b50\u8282\u70b9\u7684\u952e\u503c\u6216\u7d22\u5f15\u603b\u662f\u5c0f\u4e8e\uff08\u6216\u8005\u5927\u4e8e\uff09\u5b83\u7684\u7236\u8282\u70b9\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 std::priority_queue \u6765\u5b9e\u73b0\u5806\u6392\u5e8f\u3002","title":"\u5806\u6392\u5e8f"},{"location":"basic/sort/#\u4ee3\u7801_2","text":"C++ void heap_sort ( int * arr , int l , int r ) { std :: priority_queue < int , std :: vector < int > , std :: greater < int >> q ; for ( int i = l ; i <= r ; i ++ ) q . push ( arr [ i ]); for ( int i = l ; i <= r ; i ++ ) arr [ i ] = q . top (), q . pop (); }","title":"\u4ee3\u7801"},{"location":"basic/sort/#stdsort","text":"std::sort \u662f C++ STL \u4e2d\u7684\u6392\u5e8f\u51fd\u6570\uff0c\u5176\u5e95\u5c42\u5b9e\u73b0\u662f\uff1a \u5f53\u5143\u7d20\u4e2a\u6570\u5f88\u5c0f\u65f6\uff0c\u4f7f\u7528\u63d2\u5165\u6392\u5e8f\uff1b \u5f53\u5143\u7d20\u4e2a\u6570\u5f88\u5927\u65f6\uff0c\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\uff1b \u5f53\u9012\u5f52\u5c42\u6570\u8d85\u8fc7\u67d0\u4e2a\u503c\u65f6\uff0c\u4f7f\u7528\u5806\u6392\u5e8f\u3002 std::sort \u6e90\u4ee3\u7801\uff1a C++ template < typename _RandomAccessIterator , typename _Compare > void sort ( _RandomAccessIterator __first , _RandomAccessIterator __last , _Compare __comp ) { if ( __last - __first < 16 ) { __insertion_sort ( __first , __last , __comp ); return ; } _RandomAccessIterator __cut = __unguarded_partition ( __first , __last , __comp ); __unguarded_linear_insert ( __cut , __value_type ( __first ), __comp ); __final_insertion_sort ( __first , __cut , __comp ); }","title":"std::sort"}]}